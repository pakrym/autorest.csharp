// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;

namespace body_complex.Models
{
    /// <summary> Model factory for mocking. </summary>
    public static partial class ModelFactory
    {
        /// <summary> Creates a new instance of Error for mocking. </summary>
        /// <param name="status"> . </param>
        /// <param name="message"> . </param>
        public static Error Error(int? status, string message) => new Error(status, message);

        /// <summary> Creates a new instance of DotFish for mocking. </summary>
        /// <param name="species"> . </param>
        public static DotFish DotFish(string species) => new DotFish()
        {
            Species = species
        };

        /// <summary> Creates a new instance of DotFishMarket for mocking. </summary>
        /// <param name="sampleSalmon"> . </param>
        /// <param name="salmons"> . </param>
        /// <param name="sampleFish"> . </param>
        /// <param name="fishes"> . </param>
        public static DotFishMarket DotFishMarket(DotSalmon sampleSalmon, IReadOnlyList<DotSalmon> salmons, DotFish sampleFish, IReadOnlyList<DotFish> fishes) => new DotFishMarket(sampleSalmon, salmons, sampleFish, fishes);

        /// <summary> Creates a new instance of DotSalmon for mocking. </summary>
        /// <param name="location"> . </param>
        /// <param name="iswild"> . </param>
        /// <param name="species"> . </param>
        public static DotSalmon DotSalmon(string location, bool? iswild, string species) => new DotSalmon()
        {
            Location = location,
            Iswild = iswild,
            Species = species
        };

        /// <summary> Creates a new instance of MyBaseType for mocking. </summary>
        /// <param name="propB1"> . </param>
        /// <param name="propBH1"> . </param>
        public static MyBaseType MyBaseType(string propB1, string propBH1) => new MyBaseType()
        {
            PropB1 = propB1,
            PropBH1 = propBH1
        };

        /// <summary> Creates a new instance of MyDerivedType for mocking. </summary>
        /// <param name="propD1"> . </param>
        /// <param name="propB1"> . </param>
        /// <param name="propBH1"> . </param>
        public static MyDerivedType MyDerivedType(string propD1, string propB1, string propBH1) => new MyDerivedType()
        {
            PropD1 = propD1,
            PropB1 = propB1,
            PropBH1 = propBH1
        };
    }
}
