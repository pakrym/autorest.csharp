// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;

namespace Azure.Storage.Management.Models
{
    /// <summary> Model factory for mocking. </summary>
    public static partial class ModelFactory
    {
        /// <summary> Creates a new instance of BlobServiceItems for mocking. </summary>
        /// <param name="value"> List of blob services returned. </param>
        public static BlobServiceItems BlobServiceItems(IReadOnlyList<BlobServiceProperties> value) => new BlobServiceItems(value);

        /// <summary> Creates a new instance of ListContainerItems for mocking. </summary>
        /// <param name="value"> List of blobs containers returned. </param>
        /// <param name="nextLink"> Request URL that can be used to query next page of containers. Returned when total number of requested containers exceed maximum page size. </param>
        public static ListContainerItems ListContainerItems(IReadOnlyList<ListContainerItem> value, string nextLink) => new ListContainerItems(value, nextLink);

        /// <summary> Creates a new instance of LeaseContainerResponse for mocking. </summary>
        /// <param name="leaseId"> Returned unique lease ID that must be included with any request to delete the container, or to renew, change, or release the lease. </param>
        /// <param name="leaseTimeSeconds"> Approximate time remaining in the lease period, in seconds. </param>
        public static LeaseContainerResponse LeaseContainerResponse(string leaseId, string leaseTimeSeconds) => new LeaseContainerResponse(leaseId, leaseTimeSeconds);

        /// <summary> Creates a new instance of FileServiceItems for mocking. </summary>
        /// <param name="value"> List of file services returned. </param>
        public static FileServiceItems FileServiceItems(IReadOnlyList<FileServiceProperties> value) => new FileServiceItems(value);

        /// <summary> Creates a new instance of CloudError for mocking. </summary>
        /// <param name="error"> An error response from the Storage service. </param>
        public static CloudError CloudError(CloudErrorBody error) => new CloudError(error);

        /// <summary> Creates a new instance of CloudErrorBody for mocking. </summary>
        /// <param name="code"> An identifier for the error. Codes are invariant and are intended to be consumed programmatically. </param>
        /// <param name="message"> A message describing the error, intended to be suitable for display in a user interface. </param>
        /// <param name="target"> The target of the particular error. For example, the name of the property in error. </param>
        /// <param name="details"> A list of additional details about the error. </param>
        public static CloudErrorBody CloudErrorBody(string code, string message, string target, IReadOnlyList<CloudErrorBody> details) => new CloudErrorBody(code, message, target, details);

        /// <summary> Creates a new instance of FileShareItems for mocking. </summary>
        /// <param name="value"> List of file shares returned. </param>
        /// <param name="nextLink"> Request URL that can be used to query next page of shares. Returned when total number of requested shares exceed maximum page size. </param>
        public static FileShareItems FileShareItems(IReadOnlyList<FileShareItem> value, string nextLink) => new FileShareItems(value, nextLink);

        /// <summary> Creates a new instance of OperationListResult for mocking. </summary>
        /// <param name="value"> List of Storage operations supported by the Storage resource provider. </param>
        public static OperationListResult OperationListResult(IReadOnlyList<Operation> value) => new OperationListResult(value);

        /// <summary> Creates a new instance of Operation for mocking. </summary>
        /// <param name="name"> Operation name: {provider}/{resource}/{operation}. </param>
        /// <param name="display"> Display metadata associated with the operation. </param>
        /// <param name="origin"> The origin of operations. </param>
        /// <param name="serviceSpecification"> One property of operation, include metric specifications. </param>
        public static Operation Operation(string name, OperationDisplay display, string origin, ServiceSpecification serviceSpecification) => new Operation(name, display, origin, serviceSpecification);

        /// <summary> Creates a new instance of OperationDisplay for mocking. </summary>
        /// <param name="provider"> Service provider: Microsoft Storage. </param>
        /// <param name="resource"> Resource on which the operation is performed etc. </param>
        /// <param name="operation"> Type of operation: get, read, delete, etc. </param>
        /// <param name="description"> Description of the operation. </param>
        public static OperationDisplay OperationDisplay(string provider, string resource, string operation, string description) => new OperationDisplay(provider, resource, operation, description);

        /// <summary> Creates a new instance of ServiceSpecification for mocking. </summary>
        /// <param name="metricSpecifications"> Metric specifications of operation. </param>
        public static ServiceSpecification ServiceSpecification(IReadOnlyList<MetricSpecification> metricSpecifications) => new ServiceSpecification(metricSpecifications);

        /// <summary> Creates a new instance of MetricSpecification for mocking. </summary>
        /// <param name="name"> Name of metric specification. </param>
        /// <param name="displayName"> Display name of metric specification. </param>
        /// <param name="displayDescription"> Display description of metric specification. </param>
        /// <param name="unit"> Unit could be Bytes or Count. </param>
        /// <param name="dimensions"> Dimensions of blobs, including blob type and access tier. </param>
        /// <param name="aggregationType"> Aggregation type could be Average. </param>
        /// <param name="fillGapWithZero"> The property to decide fill gap with zero or not. </param>
        /// <param name="category"> The category this metric specification belong to, could be Capacity. </param>
        /// <param name="resourceIdDimensionNameOverride"> Account Resource Id. </param>
        public static MetricSpecification MetricSpecification(string name, string displayName, string displayDescription, string unit, IReadOnlyList<Dimension> dimensions, string aggregationType, bool? fillGapWithZero, string category, string resourceIdDimensionNameOverride) => new MetricSpecification(name, displayName, displayDescription, unit, dimensions, aggregationType, fillGapWithZero, category, resourceIdDimensionNameOverride);

        /// <summary> Creates a new instance of Dimension for mocking. </summary>
        /// <param name="name"> Display name of dimension. </param>
        /// <param name="displayName"> Display name of dimension. </param>
        public static Dimension Dimension(string name, string displayName) => new Dimension(name, displayName);

        /// <summary> Creates a new instance of StorageSkuListResult for mocking. </summary>
        /// <param name="value"> Get the list result of storage SKUs and their properties. </param>
        public static StorageSkuListResult StorageSkuListResult(IReadOnlyList<SkuInformation> value) => new StorageSkuListResult(value);

        /// <summary> Creates a new instance of SkuInformation for mocking. </summary>
        /// <param name="name"> The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType. </param>
        /// <param name="tier"> The SKU tier. This is based on the SKU name. </param>
        /// <param name="resourceType"> The type of the resource, usually it is &apos;storageAccounts&apos;. </param>
        /// <param name="kind"> Indicates the type of storage account. </param>
        /// <param name="locations"> The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). </param>
        /// <param name="capabilities"> The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc. </param>
        /// <param name="restrictions"> The restrictions because of which SKU cannot be used. This is empty if there are no restrictions. </param>
        public static SkuInformation SkuInformation(SkuName name, SkuTier? tier, string resourceType, Kind? kind, IReadOnlyList<string> locations, IReadOnlyList<SKUCapability> capabilities, IReadOnlyList<Restriction> restrictions) => new SkuInformation(name, tier, resourceType, kind, locations, capabilities, restrictions);

        /// <summary> Creates a new instance of SKUCapability for mocking. </summary>
        /// <param name="name"> The name of capability, The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc. </param>
        /// <param name="value"> A string value to indicate states of given capability. Possibly &apos;true&apos; or &apos;false&apos;. </param>
        public static SKUCapability SKUCapability(string name, string value) => new SKUCapability(name, value);

        /// <summary> Creates a new instance of Restriction for mocking. </summary>
        /// <param name="type"> The type of restrictions. As of now only possible value for this is location. </param>
        /// <param name="values"> The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted. </param>
        /// <param name="reasonCode"> The reason for the restriction. As of now this can be &quot;QuotaId&quot; or &quot;NotAvailableForSubscription&quot;. Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The &quot;NotAvailableForSubscription&quot; is related to capacity at DC. </param>
        public static Restriction Restriction(string type, IReadOnlyList<string> values, ReasonCode? reasonCode) => new Restriction(type, values, reasonCode);

        /// <summary> Creates a new instance of CheckNameAvailabilityResult for mocking. </summary>
        /// <param name="nameAvailable"> Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used. </param>
        /// <param name="reason"> Gets the reason that a storage account name could not be used. The Reason element is only returned if NameAvailable is false. </param>
        /// <param name="message"> Gets an error message explaining the Reason value in more detail. </param>
        public static CheckNameAvailabilityResult CheckNameAvailabilityResult(bool? nameAvailable, Reason? reason, string message) => new CheckNameAvailabilityResult(nameAvailable, reason, message);

        /// <summary> Creates a new instance of StorageAccountListResult for mocking. </summary>
        /// <param name="value"> Gets the list of storage accounts and their properties. </param>
        /// <param name="nextLink"> Request URL that can be used to query next page of storage accounts. Returned when total number of requested storage accounts exceed maximum page size. </param>
        public static StorageAccountListResult StorageAccountListResult(IReadOnlyList<StorageAccount> value, string nextLink) => new StorageAccountListResult(value, nextLink);

        /// <summary> Creates a new instance of StorageAccountListKeysResult for mocking. </summary>
        /// <param name="keys"> Gets the list of storage account keys and their properties for the specified storage account. </param>
        public static StorageAccountListKeysResult StorageAccountListKeysResult(IReadOnlyList<StorageAccountKey> keys) => new StorageAccountListKeysResult(keys);

        /// <summary> Creates a new instance of StorageAccountKey for mocking. </summary>
        /// <param name="keyName"> Name of the key. </param>
        /// <param name="value"> Base 64-encoded value of the key. </param>
        /// <param name="permissions"> Permissions for the key -- read-only or full permissions. </param>
        public static StorageAccountKey StorageAccountKey(string keyName, string value, KeyPermission? permissions) => new StorageAccountKey(keyName, value, permissions);

        /// <summary> Creates a new instance of UsageListResult for mocking. </summary>
        /// <param name="value"> Gets or sets the list of Storage Resource Usages. </param>
        public static UsageListResult UsageListResult(IReadOnlyList<Usage> value) => new UsageListResult(value);

        /// <summary> Creates a new instance of Usage for mocking. </summary>
        /// <param name="unit"> Gets the unit of measurement. </param>
        /// <param name="currentValue"> Gets the current count of the allocated resources in the subscription. </param>
        /// <param name="limit"> Gets the maximum count of the resources that can be allocated in the subscription. </param>
        /// <param name="name"> Gets the name of the type of usage. </param>
        public static Usage Usage(UsageUnit? unit, int? currentValue, int? limit, UsageName name) => new Usage(unit, currentValue, limit, name);

        /// <summary> Creates a new instance of UsageName for mocking. </summary>
        /// <param name="value"> Gets a string describing the resource name. </param>
        /// <param name="localizedValue"> Gets a localized string describing the resource name. </param>
        public static UsageName UsageName(string value, string localizedValue) => new UsageName(value, localizedValue);

        /// <summary> Creates a new instance of ListAccountSasResponse for mocking. </summary>
        /// <param name="accountSasToken"> List SAS credentials of storage account. </param>
        public static ListAccountSasResponse ListAccountSasResponse(string accountSasToken) => new ListAccountSasResponse(accountSasToken);

        /// <summary> Creates a new instance of ListServiceSasResponse for mocking. </summary>
        /// <param name="serviceSasToken"> List service SAS credentials of specific resource. </param>
        public static ListServiceSasResponse ListServiceSasResponse(string serviceSasToken) => new ListServiceSasResponse(serviceSasToken);

        /// <summary> Creates a new instance of ErrorResponse for mocking. </summary>
        /// <param name="code"> An identifier for the error. Codes are invariant and are intended to be consumed programmatically. </param>
        /// <param name="message"> A message describing the error, intended to be suitable for display in a user interface. </param>
        public static ErrorResponse ErrorResponse(string code, string message) => new ErrorResponse(code, message);

        /// <summary> Creates a new instance of PrivateLinkResourceListResult for mocking. </summary>
        /// <param name="value"> Array of private link resources. </param>
        public static PrivateLinkResourceListResult PrivateLinkResourceListResult(IReadOnlyList<PrivateLinkResource> value) => new PrivateLinkResourceListResult(value);

        /// <summary> Creates a new instance of EncryptionScopeListResult for mocking. </summary>
        /// <param name="value"> List of encryption scopes requested. </param>
        /// <param name="nextLink"> Request URL that can be used to query next page of encryption scopes. Returned when total number of requested encryption scopes exceeds the maximum page size. </param>
        public static EncryptionScopeListResult EncryptionScopeListResult(IReadOnlyList<EncryptionScope> value, string nextLink) => new EncryptionScopeListResult(value, nextLink);
    }
}
