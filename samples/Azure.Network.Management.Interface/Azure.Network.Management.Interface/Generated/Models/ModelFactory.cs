// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;

namespace Azure.Network.Management.Interface.Models
{
    /// <summary> Model factory for mocking. </summary>
    public static partial class ModelFactory
    {
        /// <summary> Creates a new instance of CloudError for mocking. </summary>
        /// <param name="error"> Cloud error body. </param>
        public static CloudError CloudError(CloudErrorBody error) => new CloudError(error);

        /// <summary> Creates a new instance of CloudErrorBody for mocking. </summary>
        /// <param name="code"> An identifier for the error. Codes are invariant and are intended to be consumed programmatically. </param>
        /// <param name="message"> A message describing the error, intended to be suitable for display in a user interface. </param>
        /// <param name="target"> The target of the particular error. For example, the name of the property in error. </param>
        /// <param name="details"> A list of additional details about the error. </param>
        public static CloudErrorBody CloudErrorBody(string code, string message, string target, IReadOnlyList<CloudErrorBody> details) => new CloudErrorBody(code, message, target, details);

        /// <summary> Creates a new instance of NetworkInterfaceListResult for mocking. </summary>
        /// <param name="value"> A list of network interfaces in a resource group. </param>
        /// <param name="nextLink"> The URL to get the next set of results. </param>
        public static NetworkInterfaceListResult NetworkInterfaceListResult(IReadOnlyList<NetworkInterface> value, string nextLink) => new NetworkInterfaceListResult(value, nextLink);

        /// <summary> Creates a new instance of EffectiveRouteListResult for mocking. </summary>
        /// <param name="value"> A list of effective routes. </param>
        /// <param name="nextLink"> The URL to get the next set of results. </param>
        public static EffectiveRouteListResult EffectiveRouteListResult(IReadOnlyList<EffectiveRoute> value, string nextLink) => new EffectiveRouteListResult(value, nextLink);

        /// <summary> Creates a new instance of EffectiveRoute for mocking. </summary>
        /// <param name="name"> The name of the user defined route. This is optional. </param>
        /// <param name="disableBgpRoutePropagation"> If true, on-premises routes are not propagated to the network interfaces in the subnet. </param>
        /// <param name="source"> Who created the route. </param>
        /// <param name="state"> The value of effective route. </param>
        /// <param name="addressPrefix"> The address prefixes of the effective routes in CIDR notation. </param>
        /// <param name="nextHopIpAddress"> The IP address of the next hop of the effective route. </param>
        /// <param name="nextHopType"> The type of Azure hop the packet should be sent to. </param>
        public static EffectiveRoute EffectiveRoute(string name, bool? disableBgpRoutePropagation, EffectiveRouteSource? source, EffectiveRouteState? state, IReadOnlyList<string> addressPrefix, IReadOnlyList<string> nextHopIpAddress, RouteNextHopType? nextHopType) => new EffectiveRoute(name, disableBgpRoutePropagation, source, state, addressPrefix, nextHopIpAddress, nextHopType);

        /// <summary> Creates a new instance of EffectiveNetworkSecurityGroupListResult for mocking. </summary>
        /// <param name="value"> A list of effective network security groups. </param>
        /// <param name="nextLink"> The URL to get the next set of results. </param>
        public static EffectiveNetworkSecurityGroupListResult EffectiveNetworkSecurityGroupListResult(IReadOnlyList<EffectiveNetworkSecurityGroup> value, string nextLink) => new EffectiveNetworkSecurityGroupListResult(value, nextLink);

        /// <summary> Creates a new instance of EffectiveNetworkSecurityGroup for mocking. </summary>
        /// <param name="networkSecurityGroup"> The ID of network security group that is applied. </param>
        /// <param name="association"> Associated resources. </param>
        /// <param name="effectiveSecurityRules"> A collection of effective security rules. </param>
        /// <param name="tagMap"> Mapping of tags to list of IP Addresses included within the tag. </param>
        public static EffectiveNetworkSecurityGroup EffectiveNetworkSecurityGroup(SubResource networkSecurityGroup, EffectiveNetworkSecurityGroupAssociation association, IReadOnlyList<EffectiveNetworkSecurityRule> effectiveSecurityRules, string tagMap) => new EffectiveNetworkSecurityGroup(networkSecurityGroup, association, effectiveSecurityRules, tagMap);

        /// <summary> Creates a new instance of EffectiveNetworkSecurityGroupAssociation for mocking. </summary>
        /// <param name="subnet"> The ID of the subnet if assigned. </param>
        /// <param name="networkInterface"> The ID of the network interface if assigned. </param>
        public static EffectiveNetworkSecurityGroupAssociation EffectiveNetworkSecurityGroupAssociation(SubResource subnet, SubResource networkInterface) => new EffectiveNetworkSecurityGroupAssociation(subnet, networkInterface);

        /// <summary> Creates a new instance of EffectiveNetworkSecurityRule for mocking. </summary>
        /// <param name="name"> The name of the security rule specified by the user (if created by the user). </param>
        /// <param name="protocol"> The network protocol this rule applies to. </param>
        /// <param name="sourcePortRange"> The source port or range. </param>
        /// <param name="destinationPortRange"> The destination port or range. </param>
        /// <param name="sourcePortRanges"> The source port ranges. Expected values include a single integer between 0 and 65535, a range using &apos;-&apos; as separator (e.g. 100-400), or an asterisk (*). </param>
        /// <param name="destinationPortRanges"> The destination port ranges. Expected values include a single integer between 0 and 65535, a range using &apos;-&apos; as separator (e.g. 100-400), or an asterisk (*). </param>
        /// <param name="sourceAddressPrefix"> The source address prefix. </param>
        /// <param name="destinationAddressPrefix"> The destination address prefix. </param>
        /// <param name="sourceAddressPrefixes"> The source address prefixes. Expected values include CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the asterisk (*). </param>
        /// <param name="destinationAddressPrefixes"> The destination address prefixes. Expected values include CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the asterisk (*). </param>
        /// <param name="expandedSourceAddressPrefix"> The expanded source address prefix. </param>
        /// <param name="expandedDestinationAddressPrefix"> Expanded destination address prefix. </param>
        /// <param name="access"> Whether network traffic is allowed or denied. </param>
        /// <param name="priority"> The priority of the rule. </param>
        /// <param name="direction"> The direction of the rule. </param>
        public static EffectiveNetworkSecurityRule EffectiveNetworkSecurityRule(string name, EffectiveSecurityRuleProtocol? protocol, string sourcePortRange, string destinationPortRange, IReadOnlyList<string> sourcePortRanges, IReadOnlyList<string> destinationPortRanges, string sourceAddressPrefix, string destinationAddressPrefix, IReadOnlyList<string> sourceAddressPrefixes, IReadOnlyList<string> destinationAddressPrefixes, IReadOnlyList<string> expandedSourceAddressPrefix, IReadOnlyList<string> expandedDestinationAddressPrefix, SecurityRuleAccess? access, int? priority, SecurityRuleDirection? direction) => new EffectiveNetworkSecurityRule(name, protocol, sourcePortRange, destinationPortRange, sourcePortRanges, destinationPortRanges, sourceAddressPrefix, destinationAddressPrefix, sourceAddressPrefixes, destinationAddressPrefixes, expandedSourceAddressPrefix, expandedDestinationAddressPrefix, access, priority, direction);

        /// <summary> Creates a new instance of NetworkInterfaceIPConfigurationListResult for mocking. </summary>
        /// <param name="value"> A list of ip configurations. </param>
        /// <param name="nextLink"> The URL to get the next set of results. </param>
        public static NetworkInterfaceIPConfigurationListResult NetworkInterfaceIPConfigurationListResult(IReadOnlyList<NetworkInterfaceIPConfiguration> value, string nextLink) => new NetworkInterfaceIPConfigurationListResult(value, nextLink);

        /// <summary> Creates a new instance of NetworkInterfaceLoadBalancerListResult for mocking. </summary>
        /// <param name="value"> A list of load balancers. </param>
        /// <param name="nextLink"> The URL to get the next set of results. </param>
        public static NetworkInterfaceLoadBalancerListResult NetworkInterfaceLoadBalancerListResult(IReadOnlyList<LoadBalancer> value, string nextLink) => new NetworkInterfaceLoadBalancerListResult(value, nextLink);

        /// <summary> Creates a new instance of NetworkInterfaceTapConfigurationListResult for mocking. </summary>
        /// <param name="value"> A list of tap configurations. </param>
        /// <param name="nextLink"> The URL to get the next set of results. </param>
        public static NetworkInterfaceTapConfigurationListResult NetworkInterfaceTapConfigurationListResult(IReadOnlyList<NetworkInterfaceTapConfiguration> value, string nextLink) => new NetworkInterfaceTapConfigurationListResult(value, nextLink);
    }
}
