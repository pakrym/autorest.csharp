// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.FormRecognizer.Models
{
    /// <summary> Model factory for mocking. </summary>
    public static partial class ModelFactory
    {
        /// <summary> Creates a new instance of ErrorResponse for mocking. </summary>
        /// <param name="error"> . </param>
        public static ErrorResponse ErrorResponse(ErrorInformation error) => new ErrorResponse(error);

        /// <summary> Creates a new instance of ErrorInformation for mocking. </summary>
        /// <param name="code"> . </param>
        /// <param name="message"> . </param>
        public static ErrorInformation ErrorInformation(string code, string message) => new ErrorInformation(code, message);

        /// <summary> Creates a new instance of Models for mocking. </summary>
        /// <param name="summary"> Summary of all trained custom models. </param>
        /// <param name="modelList"> Collection of trained custom models. </param>
        /// <param name="nextLink"> Link to the next page of custom models. </param>
        public static Models Models(ModelsSummary summary, IReadOnlyList<ModelInfo> modelList, string nextLink) => new Models(summary, modelList, nextLink);

        /// <summary> Creates a new instance of ModelsSummary for mocking. </summary>
        /// <param name="count"> Current count of trained custom models. </param>
        /// <param name="limit"> Max number of models that can be trained for this subscription. </param>
        /// <param name="lastUpdatedDateTime"> Date and time (UTC) when the summary was last updated. </param>
        public static ModelsSummary ModelsSummary(int count, int limit, DateTimeOffset lastUpdatedDateTime) => new ModelsSummary(count, limit, lastUpdatedDateTime);

        /// <summary> Creates a new instance of ModelInfo for mocking. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="status"> Status of the model. </param>
        /// <param name="createdDateTime"> Date and time (UTC) when the model was created. </param>
        /// <param name="lastUpdatedDateTime"> Date and time (UTC) when the status was last updated. </param>
        public static ModelInfo ModelInfo(Guid modelId, ModelStatus status, DateTimeOffset createdDateTime, DateTimeOffset lastUpdatedDateTime) => new ModelInfo(modelId, status, createdDateTime, lastUpdatedDateTime);

        /// <summary> Creates a new instance of Model for mocking. </summary>
        /// <param name="modelInfo"> Basic custom model information. </param>
        /// <param name="keys"> Keys extracted by the custom model. </param>
        /// <param name="trainResult"> Custom model training result. </param>
        public static Model Model(ModelInfo modelInfo, KeysResult keys, TrainResult trainResult) => new Model(modelInfo, keys, trainResult);

        /// <summary> Creates a new instance of KeysResult for mocking. </summary>
        /// <param name="clusters"> Object mapping clusterIds to a list of keys. </param>
        public static KeysResult KeysResult(IReadOnlyDictionary<string, IList<string>> clusters) => new KeysResult(clusters);

        /// <summary> Creates a new instance of TrainResult for mocking. </summary>
        /// <param name="trainingDocuments"> List of the documents used to train the model and any errors reported in each document. </param>
        /// <param name="fields"> List of fields used to train the model and the train operation error reported by each. </param>
        /// <param name="averageModelAccuracy"> Average accuracy. </param>
        /// <param name="errors"> Errors returned during the training operation. </param>
        public static TrainResult TrainResult(IReadOnlyList<TrainingDocumentInfo> trainingDocuments, IReadOnlyList<FormFieldsReport> fields, float? averageModelAccuracy, IReadOnlyList<ErrorInformation> errors) => new TrainResult(trainingDocuments, fields, averageModelAccuracy, errors);

        /// <summary> Creates a new instance of TrainingDocumentInfo for mocking. </summary>
        /// <param name="documentName"> Training document name. </param>
        /// <param name="pages"> Total number of pages trained. </param>
        /// <param name="errors"> List of errors. </param>
        /// <param name="status"> Status of the training operation. </param>
        public static TrainingDocumentInfo TrainingDocumentInfo(string documentName, int pages, IReadOnlyList<ErrorInformation> errors, TrainStatus status) => new TrainingDocumentInfo(documentName, pages, errors, status);

        /// <summary> Creates a new instance of FormFieldsReport for mocking. </summary>
        /// <param name="fieldName"> Training field name. </param>
        /// <param name="accuracy"> Estimated extraction accuracy for this field. </param>
        public static FormFieldsReport FormFieldsReport(string fieldName, float accuracy) => new FormFieldsReport(fieldName, accuracy);

        /// <summary> Creates a new instance of AnalyzeOperationResult for mocking. </summary>
        /// <param name="status"> Operation status. </param>
        /// <param name="createdDateTime"> Date and time (UTC) when the analyze operation was submitted. </param>
        /// <param name="lastUpdatedDateTime"> Date and time (UTC) when the status was last updated. </param>
        /// <param name="analyzeResult"> Results of the analyze operation. </param>
        public static AnalyzeOperationResult AnalyzeOperationResult(OperationStatus status, DateTimeOffset createdDateTime, DateTimeOffset lastUpdatedDateTime, AnalyzeResult analyzeResult) => new AnalyzeOperationResult(status, createdDateTime, lastUpdatedDateTime, analyzeResult);

        /// <summary> Creates a new instance of AnalyzeResult for mocking. </summary>
        /// <param name="version"> Version of schema used for this result. </param>
        /// <param name="readResults"> Text extracted from the input. </param>
        /// <param name="pageResults"> Page-level information extracted from the input. </param>
        /// <param name="documentResults"> Document-level information extracted from the input. </param>
        /// <param name="errors"> List of errors reported during the analyze operation. </param>
        public static AnalyzeResult AnalyzeResult(string version, IReadOnlyList<ReadResult> readResults, IReadOnlyList<PageResult> pageResults, IReadOnlyList<DocumentResult> documentResults, IReadOnlyList<ErrorInformation> errors) => new AnalyzeResult(version, readResults, pageResults, documentResults, errors);

        /// <summary> Creates a new instance of ReadResult for mocking. </summary>
        /// <param name="page"> The 1-based page number in the input document. </param>
        /// <param name="angle"> The general orientation of the text in clockwise direction, measured in degrees between (-180, 180]. </param>
        /// <param name="width"> The width of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="height"> The height of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="unit"> The unit used by the width, height and boundingBox properties. For images, the unit is &quot;pixel&quot;. For PDF, the unit is &quot;inch&quot;. </param>
        /// <param name="language"> The detected language on the page overall. </param>
        /// <param name="lines"> When includeTextDetails is set to true, a list of recognized text lines. The maximum number of lines returned is 300 per page. The lines are sorted top to bottom, left to right, although in certain cases proximity is treated with higher priority. As the sorting order depends on the detected text, it may change across images and OCR version updates. Thus, business logic should be built upon the actual line location instead of order. </param>
        public static ReadResult ReadResult(int page, float angle, float width, float height, LengthUnit unit, Language? language, IReadOnlyList<TextLine> lines) => new ReadResult(page, angle, width, height, unit, language, lines);

        /// <summary> Creates a new instance of TextLine for mocking. </summary>
        /// <param name="text"> The text content of the line. </param>
        /// <param name="boundingBox"> Bounding box of an extracted line. </param>
        /// <param name="language"> The detected language of this line, if different from the overall page language. </param>
        /// <param name="words"> List of words in the text line. </param>
        public static TextLine TextLine(string text, IReadOnlyList<float> boundingBox, Language? language, IReadOnlyList<TextWord> words) => new TextLine(text, boundingBox, language, words);

        /// <summary> Creates a new instance of TextWord for mocking. </summary>
        /// <param name="text"> The text content of the word. </param>
        /// <param name="boundingBox"> Bounding box of an extracted word. </param>
        /// <param name="confidence"> Confidence value. </param>
        public static TextWord TextWord(string text, IReadOnlyList<float> boundingBox, float? confidence) => new TextWord(text, boundingBox, confidence);

        /// <summary> Creates a new instance of PageResult for mocking. </summary>
        /// <param name="page"> Page number. </param>
        /// <param name="clusterId"> Cluster identifier. </param>
        /// <param name="keyValuePairs"> List of key-value pairs extracted from the page. </param>
        /// <param name="tables"> List of data tables extracted from the page. </param>
        public static PageResult PageResult(int page, int? clusterId, IReadOnlyList<KeyValuePair> keyValuePairs, IReadOnlyList<DataTable> tables) => new PageResult(page, clusterId, keyValuePairs, tables);

        /// <summary> Creates a new instance of KeyValuePair for mocking. </summary>
        /// <param name="label"> A user defined label for the key/value pair entry. </param>
        /// <param name="key"> Information about the extracted key in a key-value pair. </param>
        /// <param name="value"> Information about the extracted value in a key-value pair. </param>
        /// <param name="confidence"> Confidence value. </param>
        public static KeyValuePair KeyValuePair(string label, KeyValueElement key, KeyValueElement value, float confidence) => new KeyValuePair(label, key, value, confidence);

        /// <summary> Creates a new instance of KeyValueElement for mocking. </summary>
        /// <param name="text"> The text content of the key or value. </param>
        /// <param name="boundingBox"> Bounding box of the key or value. </param>
        /// <param name="elements"> When includeTextDetails is set to true, a list of references to the text elements constituting this key or value. </param>
        public static KeyValueElement KeyValueElement(string text, IReadOnlyList<float> boundingBox, IReadOnlyList<string> elements) => new KeyValueElement(text, boundingBox, elements);

        /// <summary> Creates a new instance of DataTable for mocking. </summary>
        /// <param name="rows"> Number of rows. </param>
        /// <param name="columns"> Number of columns. </param>
        /// <param name="cells"> List of cells contained in the table. </param>
        public static DataTable DataTable(int rows, int columns, IReadOnlyList<DataTableCell> cells) => new DataTable(rows, columns, cells);

        /// <summary> Creates a new instance of DataTableCell for mocking. </summary>
        /// <param name="rowIndex"> Row index of the cell. </param>
        /// <param name="columnIndex"> Column index of the cell. </param>
        /// <param name="rowSpan"> Number of rows spanned by this cell. </param>
        /// <param name="columnSpan"> Number of columns spanned by this cell. </param>
        /// <param name="text"> Text content of the cell. </param>
        /// <param name="boundingBox"> Bounding box of the cell. </param>
        /// <param name="confidence"> Confidence value. </param>
        /// <param name="elements"> When includeTextDetails is set to true, a list of references to the text elements constituting this table cell. </param>
        /// <param name="isHeader"> Is the current cell a header cell?. </param>
        /// <param name="isFooter"> Is the current cell a footer cell?. </param>
        public static DataTableCell DataTableCell(int rowIndex, int columnIndex, int? rowSpan, int? columnSpan, string text, IReadOnlyList<float> boundingBox, float confidence, IReadOnlyList<string> elements, bool? isHeader, bool? isFooter) => new DataTableCell(rowIndex, columnIndex, rowSpan, columnSpan, text, boundingBox, confidence, elements, isHeader, isFooter);

        /// <summary> Creates a new instance of DocumentResult for mocking. </summary>
        /// <param name="docType"> Document type. </param>
        /// <param name="pageRange"> First and last page number where the document is found. </param>
        /// <param name="fields"> Dictionary of named field values. </param>
        public static DocumentResult DocumentResult(string docType, IReadOnlyList<int> pageRange, IReadOnlyDictionary<string, FieldValue> fields) => new DocumentResult(docType, pageRange, fields);

        /// <summary> Creates a new instance of FieldValue for mocking. </summary>
        /// <param name="type"> Type of field value. </param>
        /// <param name="valueString"> String value. </param>
        /// <param name="valueDate"> Date value. </param>
        /// <param name="valueTime"> Time value. </param>
        /// <param name="valuePhoneNumber"> Phone number value. </param>
        /// <param name="valueNumber"> Floating point value. </param>
        /// <param name="valueInteger"> Integer value. </param>
        /// <param name="valueArray"> Array of field values. </param>
        /// <param name="valueObject"> Dictionary of named field values. </param>
        /// <param name="text"> Text content of the extracted field. </param>
        /// <param name="boundingBox"> Bounding box of the field value, if appropriate. </param>
        /// <param name="confidence"> Confidence score. </param>
        /// <param name="elements"> When includeTextDetails is set to true, a list of references to the text elements constituting this field. </param>
        /// <param name="page"> The 1-based page number in the input document. </param>
        public static FieldValue FieldValue(FieldValueType type, string valueString, string valueDate, string valueTime, string valuePhoneNumber, float? valueNumber, int? valueInteger, IReadOnlyList<FieldValue> valueArray, IReadOnlyDictionary<string, FieldValue> valueObject, string text, IReadOnlyList<float> boundingBox, float? confidence, IReadOnlyList<string> elements, int? page) => new FieldValue(type, valueString, valueDate, valueTime, valuePhoneNumber, valueNumber, valueInteger, valueArray, valueObject, text, boundingBox, confidence, elements, page);
    }
}
