// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Storage.Tables.Models
{
    /// <summary> Model factory for mocking. </summary>
    public static partial class ModelFactory
    {
        /// <summary> Creates a new instance of TableQueryResponse for mocking. </summary>
        /// <param name="odataMetadata"> The metadata response of the table. </param>
        /// <param name="value"> List of tables. </param>
        public static TableQueryResponse TableQueryResponse(string odataMetadata, IReadOnlyList<TableResponseProperties> value) => new TableQueryResponse(odataMetadata, value);

        /// <summary> Creates a new instance of TableResponseProperties for mocking. </summary>
        /// <param name="tableName"> The name of the table. </param>
        /// <param name="odataType"> The odata type of the table. </param>
        /// <param name="odataId"> The id of the table. </param>
        /// <param name="odataEditLink"> The edit link of the table. </param>
        public static TableResponseProperties TableResponseProperties(string tableName, string odataType, string odataId, string odataEditLink) => new TableResponseProperties(tableName, odataType, odataId, odataEditLink);

        /// <summary> Creates a new instance of TableResponse for mocking. </summary>
        /// <param name="odataMetadata"> The metadata response of the table. </param>
        /// <param name="tableName"> The name of the table. </param>
        /// <param name="odataType"> The odata type of the table. </param>
        /// <param name="odataId"> The id of the table. </param>
        /// <param name="odataEditLink"> The edit link of the table. </param>
        public static TableResponse TableResponse(string odataMetadata, string tableName, string odataType, string odataId, string odataEditLink) => new TableResponse(tableName, odataType, odataId, odataEditLink, odataMetadata);

        /// <summary> Creates a new instance of StorageError for mocking. </summary>
        /// <param name="message"> . </param>
        public static StorageError StorageError(string message) => new StorageError(message);

        /// <summary> Creates a new instance of TableEntityQueryResponse for mocking. </summary>
        /// <param name="odataMetadata"> The metadata response of the table. </param>
        /// <param name="value"> List of table entities. </param>
        public static TableEntityQueryResponse TableEntityQueryResponse(string odataMetadata, IReadOnlyList<IDictionary<string, object>> value) => new TableEntityQueryResponse(odataMetadata, value);

        /// <summary> Creates a new instance of StorageServiceStats for mocking. </summary>
        /// <param name="geoReplication"> Geo-Replication information for the Secondary Storage Service. </param>
        public static StorageServiceStats StorageServiceStats(GeoReplication geoReplication) => new StorageServiceStats(geoReplication);

        /// <summary> Creates a new instance of GeoReplication for mocking. </summary>
        /// <param name="status"> The status of the secondary location. </param>
        /// <param name="lastSyncTime"> A GMT date/time value, to the second. All primary writes preceding this value are guaranteed to be available for read operations at the secondary. Primary writes after this point in time may or may not be available for reads. </param>
        public static GeoReplication GeoReplication(GeoReplicationStatusType status, DateTimeOffset lastSyncTime) => new GeoReplication(status, lastSyncTime);
    }
}
